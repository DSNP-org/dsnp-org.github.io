{"version":3,"sources":["webpack://gatsby-dsnp-org/./src/templates/post.js"],"names":["data","location","post","ghostPost","useState","postType","setPostType","useEffect","tags","map","tag","name","type","codeinjection_styles","className","title","primary_author","published_at_pretty","dangerouslySetInnerHTML","__html","html"],"mappings":"0KAgFA,UAlEa,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACZC,EAAOF,EAAKG,UAClB,GAAgCC,cAAS,IAAlCC,EAAP,KAAiBC,EAAjB,KAUA,OARAC,gBAAU,WACNL,EAAKM,KAAKC,KAAI,SAACC,GACP,cAAAA,EAAIC,MACJL,EAAY,aAGrB,CAACJ,IAGA,gCACI,gBAAC,IAAD,CACIF,KAAMA,EACNC,SAAUA,EACVW,KAAK,YAET,gBAAC,IAAD,KACI,yBAAOA,KAAK,YAAZ,GAA2BV,EAAKW,uBAEpC,gBAAC,KAAD,KACI,uBAAKC,UAAU,aACX,2BAASA,UAAU,WACf,2BAASA,UAAU,sBACf,sBAAIA,UAAU,iBAAiBZ,EAAKa,OAC1B,SAARV,GACE,gCACI,uBAAKS,UAAU,gBACX,4BAAQZ,EAAKc,eAAeL,OAEhC,qBAAGG,UAAU,uBAAuBZ,EAAKe,qBACzC,sBAAIH,UAAU,yBAGtB,2BACIA,UAAU,qCACVI,wBAAyB,CAAEC,OAAQjB,EAAKkB","file":"component---src-templates-post-js-3543ad7fc3e2b335a2bf.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\n\nimport { Layout } from '../components/common'\nimport { MetaData } from '../components/common/meta'\n\n/**\n* Single post view (/:slug)\n*\n* This file renders a single post and loads all the content.\n*\n*/\nconst Post = ({ data, location }) => {\n    const post = data.ghostPost\n    const [postType, setPostType] = useState(``)\n\n    useEffect(() => {\n        post.tags.map((tag) => {\n            if (tag.name === `#BlogPost`) {\n                setPostType(`blog`)\n            }\n        })\n    }, [post])\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"article\"\n            />\n            <Helmet>\n                <style type=\"text/css\">{`${post.codeinjection_styles}`}</style>\n            </Helmet>\n            <Layout>\n                <div className=\"container\">\n                    <article className=\"content\">\n                        <section className=\"Post__contentBlock\">\n                            <h1 className=\"content-title\">{post.title}</h1>\n                            {(postType === `blog`) &&\n                                <>\n                                    <div className=\"Post__author\">\n                                        <span>{ post.primary_author.name }</span>\n                                    </div>\n                                    <p className=\"Post__publishedDate\">{post.published_at_pretty}</p>\n                                    <hr className=\"Post__separatorLine\"/>\n                                </>\n                            }\n                            <section\n                                className=\"content-body load-external-scripts\"\n                                dangerouslySetInnerHTML={{ __html: post.html }}\n                            />\n                        </section>\n                    </article>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nPost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            codeinjection_styles: PropTypes.object,\n            title: PropTypes.string.isRequired,\n            html: PropTypes.string.isRequired,\n            feature_image: PropTypes.string,\n            published_at_pretty: PropTypes.string.isRequired,\n            tags: PropTypes.array.isRequired,\n            primary_author: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n                profile_image: PropTypes.string,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n    query($slug: String!) {\n        ghostPost(slug: { eq: $slug }) {\n            ...GhostPostFields\n        }\n    }\n`\n"],"sourceRoot":""}